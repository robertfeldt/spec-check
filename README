    spec-check
    Copyright (c) Robert Feldt. All rights reserved.
    The use and distribution terms for this software are covered by the
    Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
    which can be found in the file CPL.TXT at the root of this distribution.
    By using this software in any fashion, you are agreeing to be bound by
        the terms of this license.
    You must not remove this notice, or any other, from this software.
    
spec-check - Specification and autochecking of sw behavior expectations
=======================================================================
    Author:  Robert Feldt
    Email:   robert.feldt (at) gmail.com
    Version: 0.1
    Date:    20080401
    License: Common Public License
    

## What is it?

spec-check is a small Clojure library for specifying expectations on 
the behavior of software and then checking them. It is similar to the 
xUnit family of unit testing frameworks but also to RSpec for 
behavior-driven testing/specification. It extends on both of these
frameworks by addign higher-order checking capabilities like random and 
exhaustive testing.


## How can I use it?

Here is a small example of how to use spec-check:

    (load-file "spec-check.clj")
    (clojure/refer 'spec)
    
    ; Collect specifications in normal Clojure functions
    (defn spec-myspec []
      (spec "My first spec"
        (is == 1 1)
        (is not= 4 (+ 3 1)) ; should fail!
        (isnt == 1 2)
        (is true? (= 'a 'a))
        (isnt true? (== 1 (count [1]))) ; should fail!
    ))
    
    ; and check it
    (check (spec-myspec))

if you save that in a file myspec.clj and run it you get:

    .F..F
    FAILURE:
      the code was: (is not= 4 (+ 3 1)), but
      arguments *ARE* the same: 4 4
    FAILURE:
      the code was: (isnt true? (== 1 (count [1]))), but
      arguments was: true
    
    Finished in 0.002633 seconds
    
    5 expectations checked, 2 failed
    

## Where can I get it?

If you have git you can simply

    git clone git://github.com/robertfeldt/spec-check.git

or you can get a tarball of the latest repo version from

    http://github.com/robertfeldt/spec-check/tarball/master

To write your own specs you only need to get the latest stable
version of the spec-check.clj file here:

    http://github.com/robertfeldt/spec-check/tree/master/latest_stable/spec-check.clj?raw=true    

## Where can I find more examples?

Check the samples directory, especially factorial\_spec.clj
(which shows parameterized specs) and clojure/nums\_spec.clj
(the start of a spec for Clojures Nums).


## What is the current status?

Done:

* Core with expectations, specs and checking
* Added utility macro isnt which is complement to is

Todo:

* Stack of spec descriptions updated and then used when reporting failures
* Random testing via lazy collections
* Fix Exception reporting bug
* Extend so can be run from command-line to load several specs and run them
  together.
* Better reporting of line numbers where expectation failed
* Write self-checks in specs/spec-check_spec.clj
* Exhaustive testing via lazy collections
* Verbose output formats to get lists of example uses from specs
* Add more specs for Clojure's core funcitonality

Possible Todos / Ideas:

* Add all-are macro to check multiple forms in one go
* Make it runnable from the command line. Example commands:
  * bar spec-re (fires up a Swing progressbar and shows red/green progress)
  * autocheck cljfiles-re & (sits in background and re-runs specs whenever there is a file change)
* Produce html files showing examples, can they tie into the API docs format?
* Allow specs to be added as :spec tag to function metadata and use that when checking.